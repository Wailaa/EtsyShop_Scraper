name: CI/CD for EtsyShop_Scraper

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:

      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping | grep PONG || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        go mod tidy

    - name: Create .env test file
      run: echo "${{ secrets.ENV_FILE_TEST }}" > .env

    - name: Install redis-tools
      run: sudo apt-get update && sudo apt-get install -y redis-tools

    - name: Wait for Redis to be ready
      run: |
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis to be ready..."
          sleep 2
        done
        echo "Redis is ready."
    
    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 2
        done
        echo "PostgreSQL is ready."

    - name: Run Tests
      run: |
        go test ./... -v
    
    - name: Create .env file 
      run: echo "${{ secrets.ENV_FILE }}" > .env

    - name: Determine the Next Docker Image Tag
      id: tag
      run: |
        TAGS=$(curl -s https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPOSITORY }}/tags/ | jq -r '.results[].name')

        LATEST_TAG=$(echo "$TAGS" | grep -E '^amd64-v1\.[0-9]+$' | sed -E 's/amd64-v1\.//' | sort -n | tail -1)

        if [ -z "$LATEST_TAG" ]; then
          NEXT_TAG="1"  # Start from v1.1 if no tags are found
        else
          NEXT_TAG=$((LATEST_TAG + 1))
        fi

        echo "::set-output name=next_tag::amd64-v1.$NEXT_TAG"

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker buildx create --use  # This ensures that the buildx builder is set up
        docker buildx build --platform linux/amd64 -t ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPOSITORY }}:${{ steps.tag.outputs.next_tag }} --push .
    
    outputs:
      next_tag: ${{ steps.tag.outputs.next_tag }}
    

  deploy:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Print Next Tag (Debugging)
      run: |
        echo "The next_tag value is: ${{ needs.build.outputs.next_tag }}"

    - name: Deploy to EC2 Docker
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          
          CONTAINER_ID=$(docker ps | grep "amd64-v1" | awk '{print $1}')
          if [ -n "$CONTAINER_ID" ]; then
              docker stop $CONTAINER_ID || true
              docker rm $CONTAINER_ID || true
          else
              echo "No running container found with image tag containing 'amd64-v1'"
          fi

          docker pull ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPOSITORY }}:${{ needs.build.outputs.next_tag }}
          docker run -d -p 80:8080 ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPOSITORY }}:${{ needs.build.outputs.next_tag }}
