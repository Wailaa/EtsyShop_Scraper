name: CI/CD for EtsyShop_Scraper

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:

      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping | grep PONG || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        go mod tidy

    - name: Create .env test file
      run: echo "${{ secrets.ENV_FILE_TEST }}" > .env

    - name: Install redis-tools
      run: sudo apt-get update && sudo apt-get install -y redis-tools

    - name: Wait for Redis to be ready
      run: |
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis to be ready..."
          sleep 2
        done
        echo "Redis is ready."
    
    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 2
        done
        echo "PostgreSQL is ready."

    - name: Run Tests
      run: |
        go test ./... -v
    
    - name: Create .env file 
      run: echo "${{ secrets.ENV_FILE }}" > .env

    - name: Determine the Next Docker Image Tag
      id: tag
      run: |
        TAGS=$(curl -s https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPOSITORY }}/tags/ | jq -r '.results[].name')

        LATEST_TAG=$(echo "$TAGS" | grep -E '^amd64-v1\.[0-9]+$' | sed -E 's/amd64-v1\.//' | sort -n | tail -1)

        if [ -z "$LATEST_TAG" ]; then
          NEXT_TAG="1"  # Start from v1.1 if no tags are found
        else
          NEXT_TAG=$((LATEST_TAG + 1))
        fi

        echo "::set-output name=next_tag::amd64-v1.$NEXT_TAG"

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker buildx create --use  # This ensures that the buildx builder is set up
        docker buildx build --platform linux/amd64 -t ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPOSITORY }}:${{ steps.tag.outputs.next_tag }} --push .
    
    outputs:
      next_tag: ${{ steps.tag.outputs.next_tag }}
    

  deploy:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Deploy to EC2 Docker
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          
          echo "fetching container id of the current running container"
          CURRENT_CONTAINER_ID=$(docker ps | grep "${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPOSITORY }}:amd64-v1" | awk '{print $1}')

          echo "checking if there is a running container.... "
          if [ -z "$CURRENT_CONTAINER_ID" ]; then
              echo "No running container found with the specified tag."
          else
              echo "Found running container with ID: $CURRENT_CONTAINER_ID"
          fi

          echo "Pulling the new Docker image: ${{secrets.DOCKER_REGISTRY}}/${{secrets.DOCKER_REPOSITORY}}:${{needs.build.outputs.next_tag}}..."
          docker pull ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPOSITORY }}:${{ needs.build.outputs.next_tag }}

          echo "check if port 80 is already in use with other container...."        
          CONTAINER_USING_PORT=$(docker ps --filter "publish=80" --format "{{.Names}}")
          
          if [ -n "$CONTAINER_USING_PORT" ]; then
              echo "stopping container using port 80: $CONTAINER_USING_PORT..."
              docker stop "$CONTAINER_USING_PORT"
              
              echo "removing container :$CONTAINER_USING_PORT..."
              docker rm "$CONTAINER_USING_PORT"
          else 
              echo "port 80 is not being used."
          fi

          echo "running the new container..."
          NEW_CONTAINER_NAME="scraper_api_$${{ needs.build.outputs.next_tag }}"
          docker run -d --name $NEW_CONTAINER_NAME -p 80:8080 ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPOSITORY }}:${{ needs.build.outputs.next_tag }}

          echo "performing check to see if the container is running...."
          NEW_CONTAINER_ID=$(docker ps -q --filter "name=$NEW_CONTAINER_NAME")
          SUCCESS=false

          for i in {1..10}; do
              NEW_CONTAINER_RUNNING=$(docker inspect --format='{{.State.Status}}' $NEW_CONTAINER_ID)
              if [ "$NEW_CONTAINER_RUNNING" == "running" ]; then
                  echo "New container is running."
                  SUCCESS=true
                  break
              fi
              echo "Waiting for the new container to become healthy... Attempt $i"
              sleep 5
          done

          if [ "$SUCCESS" != true ]; then
              echo "New container Status is not running. Performing rollback..."
              docker stop $NEW_CONTAINER_ID || true
              docker rm $NEW_CONTAINER_ID || true

              if [ -n "$CURRENT_CONTAINER_ID" ]; then
                  echo "restarting the previous working container..."
                  docker start $CURRENT_CONTAINER_ID || true
              else
                  echo "No previous container to roll back to. Exiting with failure.Rollback failed"
                  exit 1
              fi

              echo "Rollback completed successfully. Previous container is running."
              exit 1
          fi

          if [ -n "$CURRENT_CONTAINER_ID" ]; then
              echo "Stopping and removing the old container with ID: $CURRENT_CONTAINER_ID"
              docker stop $CURRENT_CONTAINER_ID || true
              docker rm $CURRENT_CONTAINER_ID || true
          fi

          echo "Deployment succeeded! New container is running."