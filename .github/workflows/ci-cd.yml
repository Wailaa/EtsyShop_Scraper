name: CI/CD for EtsyShop_Scraper

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:

      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-server --version"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        go mod tidy

    - name: Create .env file
      run: echo "${{ secrets.ENV_FILE_TEST }}" > .env

    - name: Wait for Redis to be ready
      run: |
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis to be ready..."
          sleep 2
        done
        echo "Redis is ready."
    
    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 2
        done
        echo "PostgreSQL is ready."

    - name: Run Tests
      run: |
        go test ./... -v
    
    - name: Determine the Next Docker Image Tag
      id: tag
      run: |
        TAGS=$(curl -s https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_REPOSITORY }}/tags/ | jq -r '.results[].name')

        LATEST_TAG=$(echo "$TAGS" | grep -E '^amd64-v1\.[0-9]+$' | sed -E 's/amd64-v1\.//' | sort -n | tail -1)

        if [ -z "$LATEST_TAG" ]; then
          NEXT_TAG="1"  # Start from v1.1 if no tags are found
        else
          NEXT_TAG=$((LATEST_TAG + 1))
        fi

        echo "::set-output name=next_tag::amd64-v1.$NEXT_TAG"

    - name: Build and push Docker image
      run: |
        docker buildx create --use  # This ensures that the buildx builder is set up
        docker buildx build --platform linux/amd64 -t ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_REPOSITORY }}:${{ steps.tag.outputs.next_tag }} --push .
